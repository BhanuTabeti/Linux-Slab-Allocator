#ifndef HPP_LIBMYMEM#define HPP_LIBMYMEM #include <iostream>#include <cmath>#include <cstdio>#include <cstdlib>#include <cstdbool>#include <sys/mman.h>#include <semaphore.h>using namespace std;/*	totObj stores the total number of memory fragments in the slab. *	freeObj stores the number of free memory fragments in yhe slab. *	fragmentSize stores the size of each fragment. *	bucket stores the bucket number. *	memStartLocation points to the start location of memory fragments(as some meta data is stored inside the slab,this variable is required). *	nxtSlab stores the memory location of the next slab in that bucket(it is a linked list). *	prevSlab points to the previous slab,it is NULL for the first slab in each bucket. *	bitmap[]  is the array of bool which stores the information of the availability of a particular memory fragment in the slab,every memory fragment has a true or false status here.*/struct slab{	int totObj;		int freeObj;	int fragamentSize;	int bucket;	void *memStartLocation; 	struct slab* nxtSlab;	struct slab* prevSlab;	bool bitmap[];};/*hashBucket stores the pointers to the first slabs of different granularities of fragmentation.*/struct slab* hashBucket[12];pthread_mutex_t locks[12];/*This variable keeps track that all the pointers in the hashBucket are initialised to NULL before they are used.*/bool initialized = false;/* This is a user defined function to mimic malloc().It takes the size of memory to be allocated,finds the bucket of appropriate granularity,allocates memory fragment.*/void* mymalloc(const int size);/*This is a user defined function to mimic free().It takes the memory location of the memory to be free and it finds the slab,frees the memory.*/void myfree(void *ptr);#endif